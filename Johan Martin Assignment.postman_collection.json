{
	"info": {
		"_postman_id": "c92ddd6c-ba1c-434c-8356-033a39adc230",
		"name": "Johan Martin Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Users",
			"item": [
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50bc072f-a7cf-49fd-b3cd-a82b1d75caa2",
								"exec": [
									"var jsonData =JSON.parse(responseBody);",
									"pm.globals.set(\"user_id\", jsonData.data[4].id);",
									"",
									"pm.test(\"Status code is 200\",() => pm.expect(responseCode.code).to.equal(200)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"6 Users is found on page\", () => pm.expect(jsonData.data.length).to.equal(6));",
									"pm.test(\"Verify avatar not null\",() => pm.expect(jsonData.data[1].avatar).to.not.equal(null));",
									"",
									"pm.test(\"Response Eve\",() => pm.expect (pm.response.text()).to.include(\"Eve\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdf6bf0d-c501-46f1-96c3-08ea98cfed2d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\",() => pm.expect(responseCode.code).to.equal(200)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"pm.test(\"Verify User id\", () => pm.expect(jsonData.data.id).to.equal(pm.globals.get(\"user_id\")));",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a63b8b40-b074-47c7-bbbb-3f370320b4de",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"my_user\", jsonData.id);",
									"",
									"",
									"pm.test(\"Status code is 201\",() => pm.expect(responseCode.code).to.equal(201)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"",
									"",
									"pm.test(\"Id not null\", () => pm.expect(jsonData.id).to.not.equal(null));",
									"pm.test(\"Verify that createdAt is not null\", () => pm.expect(jsonData.createdAt).to.not.equal(null));",
									"pm.test(\"Verify name\", () => pm.expect(jsonData.name).to.equal(\"Johan Martin\"));",
									"pm.test(\"Verify Job\", () => pm.expect(jsonData.job).to.equal(\"Qa Engineer\"));",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Johan Martin\",\r\n    \"job\": \"Qa Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32d9be38-026f-49ca-9cfb-904caa840b43",
								"exec": [
									"var jsonData =JSON.parse(responseBody);",
									"pm.globals.get(\"my_user\");",
									"",
									"pm.test(\"Status code is 200\",() => pm.expect(responseCode.code).to.equal(200)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"Verify Job equal Postman Master\", () => pm.expect(jsonData.job).to.equal(\"Postman Master\"));",
									"pm.test(\"Verify updated is not null\", () => pm.expect(jsonData.updatedAt).to.not.equal(null));",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Johan Martin\",\r\n    \"job\": \"Postman Master\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{my_user}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{my_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d408ca6f-2fad-4799-a27a-0a19ce2ff1e1",
								"exec": [
									"pm.globals.get(\"my_user\");",
									"",
									"",
									"pm.test(\"Status code is 204\",() => pm.expect(responseCode.code).to.equal(204)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/{{my_user}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{my_user}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Random_Color",
			"item": [
				{
					"name": "Get ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6010306d-9818-4a37-91bd-1a9c5f6b6181",
								"exec": [
									"var jsonData =JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\",() => pm.expect(responseCode.code).to.equal(200)); ",
									"pm.test(\"Response time is less than 2sec\",() => pm.expect(pm.response.responseTime).to.be.below(2000));",
									"",
									"pm.test(\"The Name  of id   \"+jsonData.data.id+\" is \"+jsonData.data.first_name+\" \"+jsonData.data.last_name, () => pm.expect(jsonData.data.id).to.equal(data.random_color));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/{{random_color}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{random_color}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Functional driven / Snapshot",
			"item": [
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf83f2c0-cf76-43d8-ad75-a4f2299afe71",
								"exec": [
									"pm.variables.set('resultat',\r",
									"{ \r",
									"    \"page\": 1,\r",
									"    \"per_page\": 6,\r",
									"    \"total\": 12,\r",
									"    \"total_pages\": 2,\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"email\": \"george.bluth@reqres.in\",\r",
									"            \"first_name\": \"George\",\r",
									"            \"last_name\": \"Bluth\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 2,\r",
									"            \"email\": \"janet.weaver@reqres.in\",\r",
									"            \"first_name\": \"Janet\",\r",
									"            \"last_name\": \"Weaver\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 3,\r",
									"            \"email\": \"emma.wong@reqres.in\",\r",
									"            \"first_name\": \"Emma\",\r",
									"            \"last_name\": \"Wong\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 4,\r",
									"            \"email\": \"eve.holt@reqres.in\",\r",
									"            \"first_name\": \"Eve\",\r",
									"            \"last_name\": \"Holt\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 5,\r",
									"            \"email\": \"charles.morris@reqres.in\",\r",
									"            \"first_name\": \"Charles\",\r",
									"            \"last_name\": \"Morris\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/stephenmoon/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 6,\r",
									"            \"email\": \"tracey.ramos@reqres.in\",\r",
									"            \"first_name\": \"Tracey\",\r",
									"            \"last_name\": \"Ramos\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg\"\r",
									"        }\r",
									"    ],\r",
									"    \"ad\": {\r",
									"        \"company\": \"StatusCode Weekly\",\r",
									"        \"url\": \"http://statuscode.org/\",\r",
									"        \"text\": \"A weekly newsletter focusing on software development, infrastructure, the server, performance, and the stack end of things.\"\r",
									"    }\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d412ac9-b69c-4607-a376-876e7b2f5960",
								"exec": [
									"const testUtils = eval(pm.variables.get('testFunction'));",
									"testUtils.testUserList();",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "888b7166-f22e-4fbd-9aac-bfc7ffa75cfd",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('testFunction', function testFunction() {",
							"    const resultat = pm.variables.get('resultat');",
							"    const respons = pm.response.json();    ",
							"     ",
							"     return {",
							"         testUserList: function testUserList() {",
							"            const getResults = (id) => resultat.data.find(x => x.id === id);",
							"            const testResults = (actual, expected) => {",
							"             pm.test('Förnamnet på id nr '+actual.id+' är '+actual.first_name, () => pm.expect(actual.first_name).to.equal(actual.first_name));",
							"             pm.test('Efternamnet är '+actual.last_name, () => pm.expect(actual.last_name).to.equal(actual.last_name));",
							"              pm.test('Emailen är '+actual.email, () => pm.expect(actual.email).to.equal(actual.email));",
							"              pm.test('Avateren  är '+actual.avatar, () => pm.expect(actual. avatar).to.equal(actual. avatar));",
							"             ",
							"              ",
							"             ",
							"           ",
							"         ",
							"         };",
							"         respons.data.forEach(x => testResults(x, getResults(x.id)));",
							"         ",
							"     }",
							"     };",
							"    ",
							"}+ '; testFunction();');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9911373b-fff0-4baf-bc92-3d2416435fe1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Functional driven / Snapshot Copy",
			"item": [
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf83f2c0-cf76-43d8-ad75-a4f2299afe71",
								"exec": [
									"pm.variables.set('resultat',\r",
									"{ \r",
									"    \"page\": 1,\r",
									"    \"per_page\": 6,\r",
									"    \"total\": 12,\r",
									"    \"total_pages\": 2,\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"email\": \"george.bluth@reqres.in\",\r",
									"            \"first_name\": \"George\",\r",
									"            \"last_name\": \"Bluth\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 2,\r",
									"            \"email\": \"janet.weaver@reqres.in\",\r",
									"            \"first_name\": \"Janet\",\r",
									"            \"last_name\": \"Weaver\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 3,\r",
									"            \"email\": \"emma.wong@reqres.in\",\r",
									"            \"first_name\": \"Emma\",\r",
									"            \"last_name\": \"Wong\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 4,\r",
									"            \"email\": \"eve.holt@reqres.in\",\r",
									"            \"first_name\": \"Eve\",\r",
									"            \"last_name\": \"Holt\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 5,\r",
									"            \"email\": \"charles.morris@reqres.in\",\r",
									"            \"first_name\": \"Charles\",\r",
									"            \"last_name\": \"Morris\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/stephenmoon/128.jpg\"\r",
									"        },\r",
									"        {\r",
									"            \"id\": 6,\r",
									"            \"email\": \"tracey.ramos@reqres.in\",\r",
									"            \"first_name\": \"Tracey\",\r",
									"            \"last_name\": \"Ramos\",\r",
									"            \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg\"\r",
									"        }\r",
									"    ],\r",
									"    \"ad\": {\r",
									"        \"company\": \"StatusCode Weekly\",\r",
									"        \"url\": \"http://statuscode.org/\",\r",
									"        \"text\": \"A weekly newsletter focusing on software development, infrastructure, the server, performance, and the stack end of things.\"\r",
									"    }\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d412ac9-b69c-4607-a376-876e7b2f5960",
								"exec": [
									"const testUtils = eval(pm.variables.get('testFunction'));",
									"testUtils.testUserList();",
									"",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/?page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "888b7166-f22e-4fbd-9aac-bfc7ffa75cfd",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set('testFunction', function testFunction() {",
							"    const resultat = pm.variables.get('resultat');",
							"    const respons = pm.response.json();    ",
							"     ",
							"     return {",
							"         testUserList: function testUserList() {",
							"            const getResults = (id) => resultat.data.find(x => x.id === id);",
							"            const testResults = (actual, expected) => {",
							"             pm.test('Förnamnet på id nr '+actual.id+' är '+actual.first_name, () => pm.expect(actual.first_name).to.equal(actual.first_name));",
							"             pm.test('Efternamnet är '+actual.last_name, () => pm.expect(actual.last_name).to.equal(actual.last_name));",
							"              pm.test('Emailen är '+actual.email, () => pm.expect(actual.email).to.equal(actual.email));",
							"              pm.test('Avateren  är '+actual. avatar, () => pm.expect(actual. avatar).to.equal(actual. avatar));",
							"      ",
							"      ",
							"              ",
							"             ",
							"           ",
							"         ",
							"         };",
							"         respons.data.forEach(x => testResults(x, getResults(x.id)));",
							"         ",
							"     }",
							"     };",
							"    ",
							"}+ '; testFunction();');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9911373b-fff0-4baf-bc92-3d2416435fe1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}